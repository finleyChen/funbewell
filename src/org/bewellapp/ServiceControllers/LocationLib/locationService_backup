package org.bewellapp.ServiceControllers.LocationLib;

//import android.os.PowerManager;
import java.io.FileOutputStream; //import java.io.IOException;  
import java.io.IOException;
import java.io.OutputStreamWriter; //import android.text.format.Time;

import android.app.Service; //import android.app.Activity;
//import android.content.Context;
//import android.os.Bundle;
//import android.widget.TextView;
import android.widget.TextView;
import android.widget.Toast;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.AudioFormat;
import android.os.Binder;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
//import android.hardware.Sensor;
//import android.hardware.SensorEvent;
//import android.hardware.SensorEventListener;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.util.Log;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;

//import com.skyhookwireless.wps.WPSAuthentication;
import com.skyhookwireless.wps.*;

import org.bewellapp.ServiceControllers.LocationLib.MyLocationManager;

import org.bewellapp.ServiceControllers.LocationLib.MyLocationManager.LocationResult;

//import com.google.android.maps.GeoPoint;

//import com.example.android.apis.app.AccelerometerManager;

// Need the following import to get access to the app resources, since this
// class is in a sub-package.
import edu.dartmouthcs.UtilLibs.MyDataTypeConverter;
import org.bewellapp.Ml_Toolkit_Application;
import org.bewellapp.R;
//import org.bewellapp.ServiceControllers.AccelerometerLib.AccelerometerManager;
import org.bewellapp.Storage.ML_toolkit_object;

public class LocationService extends Service{
	private static Context CONTEXT;

	private static final Class[] mStartForegroundSignature = new Class[] {
		int.class, Notification.class };
	private static final Class[] mStopForegroundSignature = new Class[] { boolean.class };

	public static final String ACTION_FOREGROUND = "org.bewellapp.ServiceControllers.LocationLib.FOREGROUND";
	public static final String ACTION_BACKGROUND = "org.bewellapp.ServiceControllers.LocationLib.BACKGROUND";

	private static NotificationManager mNM;
	private Method mStartForeground;
	private Method mStopForeground;

	private Object[] mStartForegroundArgs = new Object[2];
	private Object[] mStopForegroundArgs = new Object[1];

	private FileOutputStream fOut;
	//private OutputStreamWriter osw;
	public static boolean Foreground_on;

	public long no_of_records;
	public static int curr_no_of_records;
	public static boolean Activity_on;
	private static Notification notification;
	//private RehearsalAudioRecorder ar;
	private Ml_Toolkit_Application appState;

	//binder
	private final IBinder binder = new LocationBinder(); 

	//location status
	public String inferred_location_Status = "No inference available";
	private Thread t; 
	private Location location; 
	private LocationManager locationManager;
	private String provider;
	private double[] location_data;
	private ML_toolkit_object location_object;


	//location manager codes
	private MyLocationManager myLocationManager;
	private LocationResult locationResult;
	private boolean isLocationAvialable;
	private double lat;
	private double lng;

	//timer
	private Timer locationTimer;
	//private final long SkyhookDelay = 3*60*1000;
	private final long SkyhookDelay = 10*1000;

	//new timer code
	private Handler mHandler = new Handler();

	/** Called when the activity is first created. */
	@Override
	public void onCreate() {

		// Register our receiver for the ACTION_SCREEN_OFF action. This will make our receiver
		// code be called whenever the phone enters standby mode.
		//IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
		//registerReceiver(AccelerometerManager.mReceiver, filter);

		location_data = new double[2];
		location_object = null;

		// screen will stay on during this section
		appState = (Ml_Toolkit_Application) getApplicationContext();

		no_of_records = 0;
		//curr_no_of_records = 0;
		CONTEXT = this;

		mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
		try {
			mStartForeground = getClass().getMethod("startForeground",
					mStartForegroundSignature);
			mStopForeground = getClass().getMethod("stopForeground",
					mStopForegroundSignature);
		} catch (NoSuchMethodException e) {
			// Running on an older platform.
			mStartForeground = mStopForeground = null;
		}


		Toast.makeText(this,
				"Location Service Started ",
				Toast.LENGTH_SHORT).show();

		//starting location recording

		//String context = Context.LOCATION_SERVICE;
		//locationManager = (LocationManager)getSystemService(context);

		//Criteria criteria = new Criteria();
		//criteria.setAccuracy(Criteria.ACCURACY_FINE);
		//criteria.setAltitudeRequired(false);
		//criteria.setBearingRequired(false);
		//criteria.setCostAllowed(true);
		//criteria.setPowerRequirement(Criteria.POWER_LOW);
		//provider = locationManager.getBestProvider(criteria, true);


		
		myLocationManager = new MyLocationManager(this);
		locationResult = new MyLocationManager.LocationResult(){

			@Override
			public void gotLocation(Location loc) {
				// TODO Auto-generated method stub
				//if(location != null)
				//tv.setText("" + location.getLatitude() + " " + location.getLongitude());
				//else
				//tv.setText("No location");
				if(loc == null){ 
					isLocationAvialable = false;
					inferred_location_Status  = "No location found";
				}
				else
				{
					isLocationAvialable = true;
					lat =  loc.getLatitude();
					lng = loc.getLongitude();
					location_object = null;
					//System.gc();
					location_object =  new ML_toolkit_object(System.currentTimeMillis(), 2, MyDataTypeConverter.toByta(location_data));
					appState.ML_toolkit_buffer.insert(location_object);//inserting into the buffer

					inferred_location_Status  = ""+ myLocationManager.provider + "\nLat:" + lat + " \n Long:" + lng;
				}
				//runOnUiThread(locationTimer_Tick);

				updateNotificationArea();

			}      

			@Override
			public void gotLocationn(double[] loc) {
				// TODO Auto-generated method stub
				//if(location != null)
				//tv.setText("" + location.getLatitude() + " " + location.getLongitude());
				//else
				//tv.setText("No location");
				/*inferred_location_Status  = "Location found";
				
				
				if(loc == null){ 
					isLocationAvialable = false;
					inferred_location_Status  = "No location found";
				}
				/*
				else
				{
					isLocationAvialable = true;
					lat =  loc[0];
					lng = loc[1];
					location_object = null;
					//System.gc();
					location_object =  new ML_toolkit_object(System.currentTimeMillis(), 2, MyDataTypeConverter.toByta(location_data));
					appState.ML_toolkit_buffer.insert(location_object);//inserting into the buffer

					inferred_location_Status  = ""+ myLocationManager.provider + " \nLat:" + lat + " \n Long:" + lng;
				}
				//runOnUiThread(locationTimer_Tick);
				*/
				
				updateNotificationArea();
			} 
		};
		
		
		//skyhook periodic update
		WPS wps = new WPS(this);
		WPSAuthentication auth = new WPSAuthentication("mrshuva", "Dartmouth College");
		//myLocationManager.my_location = null;
		WPSPeriodicLocationCallback callback = new WPSPeriodicLocationCallback()
		{
			// What the application should do after it's done

			// What the application should do if an error occurs
			public WPSContinuation handleError(WPSReturnCode error)
			{
				//handleWPSError(error); // you'll implement handleWPSError()

				// To retry the location call on error use WPS_CONTINUE,
				// otherwise return WPS_STOP
				myLocationManager.skyhookAvailable = false;
				//double
				myLocationManager.my_location = null;
				//locationResult.gotLocation(myLocationManager.my_location);
				//runOnUiThread(locationTimer_Tick);
				
				return WPSContinuation.WPS_CONTINUE;
			}

			/*// Implements the actions using the location object
			public void handleWPSLocation(WPSLocation loc)
			{
				//location = new Location(l);
				//runOnUiThread(locationTimer_Tick);
				myLocationManager.my_location[0] = loc.getLatitude();
				myLocationManager.my_location[1] = loc.getLongitude();
				provider = "Skyhook";
				locationResult.gotLocation(myLocationManager.my_location);
				
				Log.i("location Enabled", "Skyhook exexcuted");
				//WPSContinuation.WPS_STOP;
				// you'll implement printLocation()
				//printLocation(location.getLatitude(), location.getLongitude());
			}*/

			@Override
			public WPSContinuation handleWPSPeriodicLocation(WPSLocation loc) {
				// TODO Auto-generated method stub
				//location = new Location(l);
				//runOnUiThread(locationTimer_Tick);
				myLocationManager.my_location[0] = loc.getLatitude();
				myLocationManager.my_location[1] = loc.getLongitude();
				myLocationManager.skyhookAvailable = true;
				
				//locationResult.gotLocation(myLocationManager.my_location);
				
				Log.i("location Enabled", "Skyhook exexcuted");
				//WPSContinuation.WPS_STOP;
				// you'll implement printLocation()
				//printLocation(location.getLatitude(), location.getLongitude());
				return WPSContinuation.WPS_CONTINUE;
			}

			@Override
			public void done() {
				// TODO Auto-generated method stub
				
			}
		};
		wps.getPeriodicLocation(auth, 
                WPSStreetAddressLookup.WPS_NO_STREET_ADDRESS_LOOKUP, 
                SkyhookDelay, 0, callback);
		

		myLocationManager.getLocation(LocationService.this, locationResult );
		mHandler.removeCallbacks(mUpdateTimeTask);
		//mHandler.postDelayed(mUpdateTimeTask, 1000*60*10);
		mHandler.postDelayed(mUpdateTimeTask, 1000*30);

		/*locationTimer = new Timer();
		locationTimer.schedule(new TimerTask() {
			@Override
			public void run() {
				//locationTimerMethod();
				myLocationManager.getLocation(LocationService.this, locationResult );
			}

		}, 0,1000*60*10); // every 10 minutes */


		//handler timer



		Activity_on = true;
		Foreground_on = true;
	}

	private Runnable mUpdateTimeTask = new Runnable() {
		public void run() {
			myLocationManager.getLocation(LocationService.this, locationResult );
			//mHandler.postAtTime(this,1000*60*1);
			mHandler.removeCallbacks(mUpdateTimeTask);
			//mHandler.postDelayed(mUpdateTimeTask, 1000*60*10);
			mHandler.postDelayed(mUpdateTimeTask, 1000*30);
		}
	};

	public static Context getContext() {
		return CONTEXT;
	}

	// This is the old onStart method that will be called on the pre-2.0
	// platform. On 2.0 or later we override onStartCommand() so this
	// method will not be called.
	@Override
	public void onStart(Intent intent, int startId) {
		handleCommand(intent);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		handleCommand(intent);
		// We want this service to continue running until it is explicitly
		// stopped, so return sticky.
		return START_STICKY;
	}

	void handleCommand(Intent intent) {
		if (ACTION_FOREGROUND.equals(intent.getAction())) {
			// In this sample, we'll use the same text for the ticker and the
			// expanded notification
			String text = "No of samples";// getText(R.string.foreground_service_started);

			// Set the icon, scrolling text and timestamp
			notification = new Notification(R.drawable.icon, text, System
					.currentTimeMillis());

			// The PendingIntent to launch our activity if the user selects this
			// notification
			PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
					new Intent(this,org.bewellapp.main_activity.class), 0);

			// Set the info for the views that show in the notification panel.
			notification.setLatestEventInfo(this, "Location Test ", text 
					+ " " + inferred_location_Status , contentIntent);

			startForegroundCompat(R.string.foreground_service_started_location,
					notification);
			//startForegroundCompat(2 , notification);

		} else if (ACTION_BACKGROUND.equals(intent.getAction())) {
			stopForegroundCompat(R.string.foreground_service_started_location);
			//stopForegroundCompat(2);

		}
	}

	/**
	 * This is a wrapper around the new startForeground method, using the older
	 * APIs if it is not available.
	 */
	void startForegroundCompat(int id, Notification notification) {
		// If we have the new startForeground API, then use it.
		Foreground_on = true;
		if (mStartForeground != null) {
			mStartForegroundArgs[0] = Integer.valueOf(id);
			mStartForegroundArgs[1] = notification;
			try {
				mStartForeground.invoke(this, mStartForegroundArgs);
			} catch (InvocationTargetException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke startForeground", e);
			} catch (IllegalAccessException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke startForeground", e);
			}
			return;
		}

		// Fall back on the old API.
		setForeground(true);
		mNM.notify(id, notification);
	}

	/**
	 * This is a wrapper around the new stopForeground method, using the older
	 * APIs if it is not available.
	 */
	void stopForegroundCompat(int id) {
		Foreground_on = false;
		// If we have the new stopForeground API, then use it.
		if (mStopForeground != null) {
			mStopForegroundArgs[0] = Boolean.TRUE;
			try {
				mStopForeground.invoke(this, mStopForegroundArgs);
			} catch (InvocationTargetException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke stopForeground", e);
			} catch (IllegalAccessException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke stopForeground", e);
			}
			return;
		}

		// Fall back on the old API. Note to cancel BEFORE changing the
		// foreground state, since we could be killed at that point.
		mNM.cancel(id);
		setForeground(false);
	}

	@Override
	public void onDestroy() {
		// Make sure our notification is gone.
		stopForegroundCompat(R.string.foreground_service_started_location);

		mHandler.removeCallbacks(mUpdateTimeTask);

	}


	@Override
	public IBinder onBind(Intent intent) {
		return binder;
	}

	public class LocationBinder extends Binder{
		public LocationService getService(){
			return LocationService.this;
		}
	}


	public void updateNotificationArea(){
		//if (no_of_records % 100 == 0 && Foreground_on == true) {

		String text = "Location: \n";

		// Set the info for the views that show in the notification panel.
		PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
				new Intent(this, org.bewellapp.main_activity.class), 0);


		//notification.setLatestEventInfo(this, "Audio Test ", text, contentIntent);


		// Set the info for the views that show in the notification panel.
		notification.setLatestEventInfo(this, "Location Test ", text 
				+ " " + inferred_location_Status , contentIntent);

		mNM.notify(R.string.foreground_service_started_location, notification);
		//mNM.notify(2, notification);
		//*/

		//}
	}
}
