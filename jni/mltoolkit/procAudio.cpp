#include "kiss_fftr.h"
//#include <sys/time.h>
#include <math.h>
//#include "mvnpdf.h"
#include "mfcc.h"
//#include "gmm.h"
//#include "config.h"
#include "classifier.h"
//#include "stat.h"
//#include "modelFull.h"
#include "procAudio.h"
#include "features.h"


#define SAFE_DELETE(a)  if (a)  {     \
									free(a); \
									a = NULL; \
									}

// less or equal to the frame length
int fft_length = 0;
int frame_length = 0;
int window_length = 0;
int mfcc_length = 0;
int frameIndex = 0;

// subject to change
int feature_size = 25;
// should calculate in init
const double hanning[512]= {0.00003750244528066826,0.00015000415538901635,0.00033748825396812121,0.00059992661656949053,0.00093727987487168818,0.00134949742258633210,0.00183651742304929977,0.00239826681849686363,0.00303466134102525764,0.00374560552523139911,0.00453099272253382201,0.00539070511717104628,0.00632461374387477404,0.00733257850721641402,0.00841444820262249316,0.00957006053905667953,0.01079924216336536347,0.01210180868628218942,0.01347756471008809687,0.01492630385792304004,0.01644780880474461249,0.01804185130992880248,0.01970819225150816090,0.02144658166204294059,0.02325675876611799087,0.02513845201946229846,0.02709137914968268168,0.02911524719860780763,0.03120975256623464977,0.03337458105627144622,0.03560940792327021986,0.03791389792134186587,0.04028770535444609058,0.04273047412824948488,0.04524183780354296136,0.04782141965121122773,0.05046883270874596983,0.05318367983829386247,0.05596555378623124799,0.05881403724425599000,0.06172870291198812032,0.06470911356106884282,0.06775482210074879053,0.07086537164495682051,0.07404029558083646823,0.07727911763874306672,0.08058135196368870767,0.08394650318822494128,0.08737406650675327846,0.09086352775125039472,0.09441436346839887639,0.09802604099810990901,0.10169801855342774921,0.10542974530180321269,0.10922066144772341056,0.11307019831668702059,0.11697777844051099327,0.12094281564395620299,0.12496471513265960951,0.12904287358235921879,0.13317667922939857572,0.13736551196249746631,0.14160874341577434077,0.14590573706300768997,0.15025584831312099876,0.15465842460687773130,0.15911280551477180456,0.16361832283609800687,0.16817430069918931634,0.17278005566280352223,0.17743489681864677010,0.18213812589501598982,0.18688903736154688362,0.19168691853505037681,0.19653104968642165495,0.20142070414860685501,0.20635514842561059057,0.21133364230252676963,0.21635543895657860514,0.22141978506914911096,0.22652592093878654023,0.23167308059516661389,0.23686049191399605185,0.24208737673283808878,0.24735295096784504221,0.25265642473137872592,0.25799700245050055658,0.26337388298631581041,0.26878625975415221250,0.27423332084455526170,0.27971424914508336013,0.28522822246288154213,0.29077441364801942525,0.29635199071757134526,0.30196011698042157789,0.30759795116277716120,0.31326464753436639166,0.31895935603530689573,0.32468122240362284892,0.33042938830339257938,0.33620299145350784897,0.34200116575702366184,0.34782304143108200289,0.35366774513738719055,0.35953440011321524672,0.36542212630293779974,0.37133004049003748293,0.37725725642960039607,0.38320288498126064969,0.38916603424258072730,0.39514580968284485074,0.40114131427724830647,0.40715164864145908519,0.41317591116653479277,0.41921319815417268373,0.42526260395227283295,0.43132322109079590522,0.43739414041789131948,0.44347445123627965424,0.44956324143986586828,0.45565959765056418540,0.46176260535531388207,0.46787134904326493912,0.47398491234311374010,0.48010237816056788862,0.48622282881591899484,0.49234534618170389120,0.49846901182043268363,0.50459290712236315457,0.51071611344330147819,0.51683771224240770970,0.52295678521998589794,0.52907241445523789380,0.53518368254396075923,0.54128967273616612754,0.54738946907360175320,0.55348215652715404556,0.55956682113411182478,0.56564255013526909543,0.57170843211184818600,0.57776355712222149386,0.58380701683841174088,0.58983790468234942317,0.59585531596186913639,0.60185834800642212805,0.60784610030248487078,0.61381767462864667007,0.61977217519034932813,0.62570870875426720659,0.63162638478229959915,0.63752431556516087063,0.64340161635554493635,0.64925740550084731773,0.65509080457541934983,0.66090093851234288369,0.66668693573469772762,0.67244792828630695070,0.67818305196193917617,0.68389144643694654846,0.68957225539632371891,0.69522462666316198199,0.70084771232648468420,0.70644066886844225639,0.71200265729084821764,0.71753284324103649983,0.72303039713702343949,0.72849449429195201056,0.73392431503780397595,0.73931904484835775371,0.74467787446137556628,0.74999999999999988898,0.75528462309334354341,0.76053095099625300790,0.76573819670822784733,0.77090557909147849891,0.77603232298810487233,0.78111765933637711257,0.78616082528610253810,0.79116106431306087998,0.79611762633248994714,0.80102976781160650788,0.80589675188114229254,0.81071784844588234975,0.81549233429418599428,0.82021949320647635773,0.82489861606267966820,0.82952900094860049229,0.83410995326121539772,0.83864078581287060388,0.84312081893436674473,0.84754938057691608932,0.85192580641295567734,0.85624943993580393542,0.86051963255814234444,0.86473574370931038935,0.86889714093139691631,0.87300319997411546247,0.87705330488844823744,0.88104684811904288022,0.88498323059535355384,0.88886186182150694890,0.89268215996488153863,0.89644355194338898318,0.90014547351144202914,0.90378736934459635854,0.90736869312285528544,0.91088890761262253370,0.91434748474729321543,0.91774390570646824372,0.92107766099378274305,0.92434825051333624479,0.92755518364471023496,0.93069797931656794709,0.93377616607881841482,0.93678928217333923278,0.93973687560324448143,0.94261850420068893364,0.94543373569319744121,0.94818214776851017511,0.95086332813793283947,0.95347687459818530886,0.95602239509173525533,0.95849950776561043675,0.96090784102868087579,0.96324703360740082658,0.96551673460000375648,0.96771660352914035119,0.96984631039295421395,0.97190553571458471183,0.97389397059009219504,0.97581131673479593047,0.97765728652802064147,0.97943160305624177298,0.98113400015462515213,0.98276422244695471608,0.98432202538394109048,0.98580717527990691096,0.98721944934784100489,0.98855863573281999024,0.98982453354378696631,0.99101695288368851777,0.99213571487796059500,0.99318065170136116127,0.99415160660314616514,0.99504843393058317602,0.99587099915080112833,0.99661917887097151159,0.99729286085681811969,0.99789194404945380512,0.99841633858053979722,0.99886596578576747341,0.99924075821665803154,0.99954065965068117361,0.99976562509968824877,0.99991562081666129913,0.99999062430077612085,0.99999062430077612085,0.99991562081666129913,0.99976562509968824877,0.99954065965068117361,0.99924075821665803154,0.99886596578576747341,0.99841633858053979722,0.99789194404945380512,0.99729286085681811969,0.99661917887097151159,0.99587099915080112833,0.99504843393058317602,0.99415160660314616514,0.99318065170136116127,0.99213571487796059500,0.99101695288368851777,0.98982453354378696631,0.98855863573281999024,0.98721944934784100489,0.98580717527990691096,0.98432202538394109048,0.98276422244695471608,0.98113400015462515213,0.97943160305624177298,0.97765728652802064147,0.97581131673479593047,0.97389397059009219504,0.97190553571458471183,0.96984631039295421395,0.96771660352914035119,0.96551673460000375648,0.96324703360740082658,0.96090784102868087579,0.95849950776561043675,0.95602239509173525533,0.95347687459818530886,0.95086332813793283947,0.94818214776851017511,0.94543373569319744121,0.94261850420068893364,0.93973687560324448143,0.93678928217333923278,0.93377616607881841482,0.93069797931656794709,0.92755518364471023496,0.92434825051333624479,0.92107766099378274305,0.91774390570646824372,0.91434748474729321543,0.91088890761262253370,0.90736869312285528544,0.90378736934459635854,0.90014547351144202914,0.89644355194338898318,0.89268215996488153863,0.88886186182150694890,0.88498323059535355384,0.88104684811904288022,0.87705330488844823744,0.87300319997411546247,0.86889714093139691631,0.86473574370931038935,0.86051963255814234444,0.85624943993580393542,0.85192580641295567734,0.84754938057691608932,0.84312081893436674473,0.83864078581287060388,0.83410995326121539772,0.82952900094860049229,0.82489861606267966820,0.82021949320647635773,0.81549233429418599428,0.81071784844588234975,0.80589675188114229254,0.80102976781160650788,0.79611762633248994714,0.79116106431306087998,0.78616082528610253810,0.78111765933637711257,0.77603232298810487233,0.77090557909147849891,0.76573819670822784733,0.76053095099625300790,0.75528462309334354341,0.74999999999999988898,0.74467787446137556628,0.73931904484835775371,0.73392431503780397595,0.72849449429195201056,0.72303039713702343949,0.71753284324103649983,0.71200265729084821764,0.70644066886844225639,0.70084771232648468420,0.69522462666316198199,0.68957225539632371891,0.68389144643694654846,0.67818305196193917617,0.67244792828630695070,0.66668693573469772762,0.66090093851234288369,0.65509080457541934983,0.64925740550084731773,0.64340161635554493635,0.63752431556516087063,0.63162638478229959915,0.62570870875426720659,0.61977217519034932813,0.61381767462864667007,0.60784610030248487078,0.60185834800642212805,0.59585531596186913639,0.58983790468234942317,0.58380701683841174088,0.57776355712222149386,0.57170843211184818600,0.56564255013526909543,0.55956682113411182478,0.55348215652715404556,0.54738946907360175320,0.54128967273616612754,0.53518368254396075923,0.52907241445523789380,0.52295678521998589794,0.51683771224240770970,0.51071611344330147819,0.50459290712236315457,0.49846901182043268363,0.49234534618170389120,0.48622282881591899484,0.48010237816056788862,0.47398491234311374010,0.46787134904326493912,0.46176260535531388207,0.45565959765056418540,0.44956324143986586828,0.44347445123627965424,0.43739414041789131948,0.43132322109079590522,0.42526260395227283295,0.41921319815417268373,0.41317591116653479277,0.40715164864145908519,0.40114131427724830647,0.39514580968284485074,0.38916603424258072730,0.38320288498126064969,0.37725725642960039607,0.37133004049003748293,0.36542212630293779974,0.35953440011321524672,0.35366774513738719055,0.34782304143108200289,0.34200116575702366184,0.33620299145350784897,0.33042938830339257938,0.32468122240362284892,0.31895935603530689573,0.31326464753436639166,0.30759795116277716120,0.30196011698042157789,0.29635199071757134526,0.29077441364801942525,0.28522822246288154213,0.27971424914508336013,0.27423332084455526170,0.26878625975415221250,0.26337388298631581041,0.25799700245050055658,0.25265642473137872592,0.24735295096784504221,0.24208737673283808878,0.23686049191399605185,0.23167308059516661389,0.22652592093878654023,0.22141978506914911096,0.21635543895657860514,0.21133364230252676963,0.20635514842561059057,0.20142070414860685501,0.19653104968642165495,0.19168691853505037681,0.18688903736154688362,0.18213812589501598982,0.17743489681864677010,0.17278005566280352223,0.16817430069918931634,0.16361832283609800687,0.15911280551477180456,0.15465842460687773130,0.15025584831312099876,0.14590573706300768997,0.14160874341577434077,0.13736551196249746631,0.13317667922939857572,0.12904287358235921879,0.12496471513265960951,0.12094281564395620299,0.11697777844051099327,0.11307019831668702059,0.10922066144772341056,0.10542974530180321269,0.10169801855342774921,0.09802604099810990901,0.09441436346839887639,0.09086352775125039472,0.08737406650675327846,0.08394650318822494128,0.08058135196368870767,0.07727911763874306672,0.07404029558083646823,0.07086537164495682051,0.06775482210074879053,0.06470911356106884282,0.06172870291198812032,0.05881403724425599000,0.05596555378623124799,0.05318367983829386247,0.05046883270874596983,0.04782141965121122773,0.04524183780354296136,0.04273047412824948488,0.04028770535444609058,0.03791389792134186587,0.03560940792327021986,0.03337458105627144622,0.03120975256623464977,0.02911524719860780763,0.02709137914968268168,0.02513845201946229846,0.02325675876611799087,0.02144658166204294059,0.01970819225150816090,0.01804185130992880248,0.01644780880474461249,0.01492630385792304004,0.01347756471008809687,0.01210180868628218942,0.01079924216336536347,0.00957006053905667953,0.00841444820262249316,0.00733257850721641402,0.00632461374387477404,0.00539070511717104628,0.00453099272253382201,0.00374560552523139911,0.00303466134102525764,0.00239826681849686363,0.00183651742304929977,0.00134949742258633210,0.00093727987487168818,0.00059992661656949053,0.00033748825396812121,0.00015000415538901635,0.00003750244528066826};

double * sf_history;
double * se_history;
double * sc_history;
double * ro_history;
double * bw_history;
double * rms_history;
double * mfcc_history;
double * lastfft; //fft long term average
//static double mfcc_history[window_length][mfcc_length]; // include DC


void initAudioProcessor(int frameLength, int windowLength, int mfccLength,int sr){
// must be 2^x
frameIndex = 0;
frame_length = frameLength;
fft_length = frameLength/2+1;
window_length = windowLength;
mfcc_length = mfccLength;
initMfcc(sr, mfccLength, sr/2, 0, fft_length);
sf_history = (double *)malloc(window_length*sizeof(double));
se_history = (double *)malloc(window_length*sizeof(double));
sc_history = (double *)malloc(window_length*sizeof(double));
ro_history = (double *)malloc(window_length*sizeof(double));
bw_history = (double *)malloc(window_length*sizeof(double));
rms_history= (double *)malloc(window_length*sizeof(double));
lastfft = (double *)malloc(fft_length*sizeof(double));
mfcc_history = (double *)malloc(window_length*mfccLength*sizeof(double));
}

void delAudioProcessor(){
delMfcc();
SAFE_DELETE(sf_history);
SAFE_DELETE(se_history);
SAFE_DELETE(sc_history);
SAFE_DELETE(ro_history);
SAFE_DELETE(bw_history);
SAFE_DELETE(rms_history);
SAFE_DELETE(lastfft);
SAFE_DELETE(mfcc_history);
}

void windowFeat(double * feature){
			double semean = 0;
			double sev = 0;
			double sfmean = 0;
			double sfv = 0;
			double scmean = 0;
			double scv = 0;
			double romean = 0;
			double rov = 0;
			double bwmean = 0;
			double bwv = 0;
			double rmsmean = 0;
			double rmsv = 0;
			double lowenergy = 0;
			double pr[9];
			//double entmean = 0;
			//double entv = 0;
			int result = 0;
			//maxTuple m;
			//printf("enter-------------\n", rmsmean,rmsv);			
			/*			
			for(int i=0;i<window_length;i++){
				printf("%f,",rms_history[i]);
			}
			printf("\n");
			*/
			variance(rms_history,window_length, &rmsmean,&rmsv);
			//printf("%f,%f,slience\n", rmsmean,rmsv);
			variance(se_history, window_length, &semean, &sev);
			variance(sf_history, window_length, &sfmean, &sfv);
			variance(sc_history, window_length, &scmean, &scv);
			variance(ro_history, window_length, &romean, &rov);
			variance(bw_history, window_length, &bwmean, &bwv);
			
  
			double tmp =  rmsmean*0.5;
			for(int i=0;i<window_length;i++){
				if(rms_history[i]<=tmp)lowenergy++;
			}
			
			feature[0] = semean;feature[1] = sev; feature[2] = sfmean;feature[3] = sfv; 
			feature[4] = romean;feature[5] = rov; feature[6] = scmean; feature[7] = scv; 
			feature[8] = bwmean; feature[9] = bwv; feature[10] = lowenergy;
			//timeStamp[5] = clock();
			//gettimeofday(&tv[5], NULL);
			memcpy(feature+11, mfcc_history + (frameIndex % window_length)*mfcc_length + 1, sizeof(double)*(mfcc_length-1));
			feature[24] = rmsmean;
}



void frameFeat( short * data, int length) {
	///////////////////////////////////////////////////////	
	double sample[frame_length];
	kiss_fft_cpx freq[fft_length];
	double fft[fft_length]; 
        double energySpec[fft_length];
	double sumfft = 0;
	double sumEnerySpec = 0;
	double rms = 0;
	double specEntropy = 0;
	double specFlux = 0;
	double specCentroid = 0;
	double rolloff = 0;
	double bandwidth = 0;
	//benchmark timer
	//time_t timeStamp[10];
	//struct timeval tv[10];	
		//timeStamp[0] = clock();
		//gettimeofday(&tv[0], NULL);
		//printf("audio processing %d,%d\n",frame_length,data[511]);     
		for(int i=0;i<frame_length;i++){
			//if(frameIndex < 5)printf("%d,",*(s+i));
			//printf("%d,",*(s+i));
			sample[i] = (*(data+i))*hanning[i];
			rms += (*(data+i))*(*(data+i));
		}
		rms_history[frameIndex % window_length] = sqrt(rms/frame_length);
                //printf("rms %f,",rms_history[frameIndex % window_length]);
		kiss_fftr_cfg cfg = kiss_fftr_alloc(frame_length,0, NULL, NULL);
		kiss_fftr(cfg, sample, freq);
		free(cfg);
		//********************** discard dc, i start from 1 ********************************
		for(int i = 0;i<fft_length;i++){
			energySpec[i] = (double)(freq[i].i*freq[i].i+freq[i].r*freq[i].r);
			fft[i] = sqrt(energySpec[i]);
			if(fft[i] == 0){
				fft[i] = 0.00000000000000000001;
			}
			if (i>=1){
				sumfft += fft[i];
				sumEnerySpec += energySpec[i];
			}
		}
		/*
		 for(int i=0;i<fft_length;i++){
		 if(DEBUG) printf("%f,",energySpec[i]);
		 }
		 if(DEBUG) printf("\n");		
		 */
		//////////////////////////// mfcc calculation ////////////////////////////////////		
		//gettimeofday(&tv[2], NULL);
		double* mf = calculateMfcc(energySpec);
		memcpy(mfcc_history + (frameIndex % window_length)*mfcc_length, mf, sizeof(double)*mfcc_length);
		//gettimeofday(&tv[3], NULL);
		 /*
		 for(int i = 0;i<mfcc_length;i++){
		 printf("%f,",mf[i]);
		 }
		 printf("\n");
		*/
		//fft[],and spectralenenry[] are normalized
		///////////////////////////////////////////////////////////////////////////////////
		
		for(int i=1;i<fft_length;i++){
			fft[i] = fft[i]/sumfft;
			energySpec[i] = energySpec[i]/sumEnerySpec;
		}
		//reuse sumfft for roll off
		sumfft = 0;
		for(int i=1;i<fft_length;i++){
			sumfft += fft[i];
			if( sumfft >= 0.93 ){
				rolloff = i;
				ro_history[frameIndex % window_length] = rolloff;
				break;
			}
		}
		
		if(frameIndex>0){
			for(int i=1;i<fft_length;i++){
				specEntropy += fft[i]*log(fft[i]/lastfft[i]);
				specFlux += pow(fft[i]-lastfft[i],2);
				specCentroid += i*energySpec[i];
			}
			for(int i=1;i<fft_length;i++){
				bandwidth += (i - specCentroid)*(i- specCentroid)*energySpec[i];
			}
			se_history[frameIndex % window_length] = specEntropy;
			sf_history[frameIndex % window_length] = specFlux;
			sc_history[frameIndex % window_length] = specCentroid;
			bandwidth = sqrt(bandwidth);
			bw_history[frameIndex % window_length] = bandwidth;
			//if(DEBUG) printf("%f,%f\n",specFlux,specCentroid);
		}
		
		
		//keep history
		if( frameIndex==0 ){
			for(int i = 1;i<fft_length;i++){
				lastfft[i] = fft[i];
			}
		}else{
			for(int i=1;i<fft_length;i++){
				lastfft[i] = fft[i]*0.05 +lastfft[i]*0.95;
			}
		}
                //printf("rms %f\n",rms_history[frameIndex % window_length]);

		//timeStamp[4] = clock();
		//gettimeofday(&tv[4], NULL);
		//right now step can only be 1/2 window or window.
}

int processAudio( short * data, int length, void (*callBack)(int)) {
	int activity = -2;
	frameFeat(data,length);	
	if ((frameIndex + 1)>= window_length  && (frameIndex + 1) % (window_length) == 0){ 			
			//features
			double feature[feature_size];
			windowFeat(feature);
			if(feature[24] < 50){
				activity = -1;
			} else {
			activity = tree(feature);
                        }
			callBack(activity);
			//if (result == 2 && r2 - r1 > 15) 
			//timeStamp[6] = clock();
			//gettimeofday(&tv[6], NULL);
			//printf("-----------------------------%d\n",result);

		}			
	frameIndex++;
	return activity;	
}
